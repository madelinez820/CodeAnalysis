<Project Sdk="Microsoft.NET.Sdk">
  <Sdk Name="Microsoft.Build.CentralPackageVersions" />

  <PropertyGroup>
    <Dev>$(VisualStudioVersion.Substring(0, 2))</Dev>
    <TargetFramework>net472</TargetFramework>
    <Platforms>AnyCPU;x86</Platforms>
    <Platform>x86</Platform>

    <RootNamespace>Xamarin.CodeAnalysis</RootNamespace>

    <IncludeDebugSymbolsInVSIXContainer>true</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>true</IncludeDebugSymbolsInLocalVSIXDeployment>
    <DefaultIncludeOutputGroupsInVSIX>BuiltProjectOutputGroup;DebugSymbolsProjectOutputGroup;GetCopyToOutputDirectoryItems;SatelliteDllsProjectOutputGroup</DefaultIncludeOutputGroupsInVSIX>

    <TargetVsixContainerName>Xamarin.CodeAnalysis.vsix</TargetVsixContainerName>

    <IsExperimental>true</IsExperimental>
    <IsSystemComponent>false</IsSystemComponent>

    <!--<CreateVsixContainer>true</CreateVsixContainer>-->
    <VsixVersion>42.42.42</VsixVersion>
    <DefaultItemExcludes>*.targets</DefaultItemExcludes>
  </PropertyGroup>
  
  
  <PropertyGroup Condition="$(CI)">
    <IsProductComponent>true</IsProductComponent>
    <IsExperimental>false</IsExperimental>
    <IsSystemComponent>true</IsSystemComponent>
    <ExtensionInstallationRoot>Extensions</ExtensionInstallationRoot>
    <ExtensionInstallationFolder>Xamarin\Forms.Previewer</ExtensionInstallationFolder>
    <DeployExtension>false</DeployExtension>
    <CreateVsixContainer>true</CreateVsixContainer>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.VSSDK.BuildTools" />
    <PackageReference Include="MSBuilder.ThisAssembly.Metadata" />
    <PackageReference Include="Xamarin.VSSDK.BuildTools" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Xamarin.CodeAnalysis\Xamarin.CodeAnalysis.csproj">
      <Name>Xamarin.CodeAnalysis</Name>
    </ProjectReference>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator></Generator>
      <MergeWithCTO>true</MergeWithCTO>
      <ManifestResourceName>VSPackage</ManifestResourceName>
    </EmbeddedResource>
    <Resource Include="Properties\ICN_Xamarin.ico" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="*.targets" IncludeInVSIX="true" VSIXSubPath="Xamarin" SymLink="true" />
    <Content Update="Xamarin.CodeAnalysis.ImportAfter.targets" VSIXSubPath="Current\Microsoft.Common.Targets\ImportAfter" />
    <Content Update="@(Content)" Condition="$(CI)" InstallRoot="MSBuild" />
    <UpToDateCheckInput Include="@(Content)" />
  </ItemGroup>

  <Target Name="GetVsixVersion" DependsOnTargets="SetVersions" Returns="$(VsixVersion)">
    <PropertyGroup>
      <VsixVersion Condition="$(CI)">$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</VsixVersion>
    </PropertyGroup>
  </Target>

  <Target Name="AppendVsixVersionToTargetVsixContainer" BeforeTargets="CreateVsixContainer" DependsOnTargets="GetVsixVersion">
    <PropertyGroup>
      <TargetVsixContainer>$([System.IO.Path]::ChangeExtension('$(TargetVsixContainer)', '$(VsixVersion).vsix'))</TargetVsixContainer>
    </PropertyGroup>
  </Target>

  <Target Name="IncludeSymbolsFromProjectReferences" BeforeTargets="GetVsixSourceItems">
    <!-- For any project references that are set to copy local ('Private' property != false), add the output groups for project references that are not set -->
    <ItemGroup>
      <ProjectReferenceWithConfiguration Condition="'%(ProjectReferenceWithConfiguration.Private)' != 'false' and '%(ProjectReferenceWithConfiguration.IncludeOutputGroupsInVSIX)' == ''">
        <IncludeOutputGroupsInVSIX>$(DefaultIncludeOutputGroupsInVSIX)</IncludeOutputGroupsInVSIX>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>

  <Target Name="IsExperimental" Returns="$(IsExperimental)" />
  <Target Name="IsSystemComponent" Returns="$(IsSystemComponent)" />

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <BuildDependsOn Condition="!$(CI)">
      $(BuildDependsOn);
      SymLink
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="SymLink" DependsOnTargets="IsAdministrator;CollectLinkItems;ReplaceLinkItems" />
  
  <Target Name="IsAdministrator">
    <IsAdministrator>
      <Output TaskParameter="Result" PropertyName="IsAdministrator" />
    </IsAdministrator>
    <Warning Text="Current user isn't an Administrator, so MSBuild artifacts won't be symlinked." Condition="'$(IsAdministrator)' == 'false'" />
  </Target>
  
  <ItemDefinitionGroup>
    <MkLinkCandidate>
      <Exists>false</Exists>
      <IsSymLink>false</IsSymLink>
    </MkLinkCandidate>
    <VSIXSourceItem>
      <VSIXSubPath />
      <SymLink />
    </VSIXSourceItem>
  </ItemDefinitionGroup>
    
  <Target Name="CollectLinkItems" DependsOnTargets="IsAdministrator;GetVsixDeploymentPath;GetVsixSourceItems" Condition="'$(IsAdministrator)' == 'true'">
    <ItemGroup>
      <MkLinkCandidate Include="@(VSIXSourceItem -> '$(MSBuildExtensionsPath)\%(VSIXSubPath)\%(Filename)%(Extension)')" Condition="'%(SymLink)' == 'true'">
        <LinkTarget>$(VsixDeploymentPath)\%(VSIXSubPath)\%(Filename)%(Extension)</LinkTarget>
      </MkLinkCandidate>
      <MkLinkCandidate Condition="Exists('%(FullPath)')">
        <IsSymLink Condition="$([MSBuild]::BitwiseAnd(1024, $([System.IO.File]::GetAttributes('%(FullPath)')))) == '1024'">true</IsSymLink>
        <Exists>true</Exists>
      </MkLinkCandidate>
      <MkLinkSource Include="@(MkLinkCandidate)" Condition="!Exists('%(FullPath)') Or '%(IsSymLink)' == 'false'" />
    </ItemGroup>
  </Target>

  <Target Name="ReplaceLinkItems" Condition="'@(MkLinkSource)' != '' And '$(IsAdministrator)' == 'true'">
    <Message Text="In $(Configuration) builds, we attempt to symlink MSBuild files with current project output." Importance="high" />
    <ItemGroup>
      <_FilesToDelete Include="@(MkLinkSource -&gt; WithMetadataValue('Exists', 'true'))" />
    </ItemGroup>
    <Exec Command="del &quot;%(_FilesToDelete.FullPath)&quot;" EchoOff="true" Condition="'@(_FilesToDelete)' != ''" />
    <Exec Command="mklink &quot;%(MkLinkSource.Identity)&quot; &quot;%(MkLinkSource.LinkTarget)&quot;" ConsoleToMSBuild="true" EchoOff="true" Condition="Exists('%(MkLinkSource.RootDir)%(MkLinkSource.Directory)')">
      <Output TaskParameter="ConsoleOutput" ItemName="MkLinked" />
    </Exec>
    <Message Importance="high" Text="%(MkLinked.Identity)" Condition="'@(MkLinked)' != ''" />
  </Target>
  
  <UsingTask TaskName="IsAdministrator" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Result ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Security.Principal" />
      <Code Type="Fragment" Language="cs">
        Result = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
      </Code>
    </Task>
  </UsingTask>

</Project>